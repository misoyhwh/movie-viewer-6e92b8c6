{
  "key": "backendHandlesList",
  "value": [
    {
      "id": "BAC-001",
      "category": "認証",
      "handleName": "ユーザー認証",
      "description": "ユーザーの認証情報を検証し アクセストークンを発行する",
      "handleProcedure": "1. クライアントから受け取った認証情報を検証する\n2. 認証情報が有効な場合 JWTトークンを生成する\n3. 生成したトークンをクライアントに返す\n4. 認証に失敗した場合 エラーレスポンスを返す",
      "fileName": "auth.ts",
      "relatedScreen": "SCR-001",
      "relatedFrontendCode": "import React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { supabase } from '@/supabase';\nimport Topbar from '@/components/Topbar';\nimport { FaUser, FaLock } from 'react-icons/fa';\n\nconst LoginPage = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const router = useRouter();\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const { error } = await supabase.auth.signIn({ email, password });\n      if (error) throw error;\n      router.push('/main');\n    } catch (error) {\n      setError('ログインに失敗しました。メールアドレスとパスワードを確認してください。');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100 flex flex-col\">\n      <Topbar />\n      <div className=\"flex-grow flex items-center justify-center\">\n        <div className=\"bg-white p-8 rounded-lg shadow-md w-full max-w-md\">\n          <h1 className=\"text-3xl font-bold text-center mb-6 text-gray-800\">ログイン</h1>\n          {error && <p className=\"text-red-500 text-sm mb-4\">{error}</p>}\n          <form onSubmit={handleLogin}>\n            <div className=\"mb-4\">\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                メールアドレス\n              </label>\n              <div className=\"relative\">\n                <FaUser className=\"absolute top-3 left-3 text-gray-400\" />\n                <input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"pl-10 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  required\n                />\n              </div>\n            </div>\n            <div className=\"mb-6\">\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                パスワード\n              </label>\n              <div className=\"relative\">\n                <FaLock className=\"absolute top-3 left-3 text-gray-400\" />\n                <input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"pl-10 w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  required\n                />\n              </div>\n            </div>\n            <button\n              type=\"submit\"\n              className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n            >\n              ログイン\n            </button>\n          </form>\n          <p className=\"mt-4 text-center text-sm text-gray-600\">\n            アカウントをお持ちでない方は\n            <Link href=\"/register\" className=\"text-blue-600 hover:underline\">\n              こちら\n            </Link>\n            から登録してください。\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoginPage;"
    },
    {
      "id": "BAC-002",
      "category": "動画管理",
      "handleName": "動画メタデータ取得",
      "description": "Azure Blob Storageから動画メタデータを取得し データベースに保存する",
      "handleProcedure": "1. Azure Blob Storageに接続する\n2. 新しくアップロードされた動画ファイルのリストを取得する\n3. 各動画ファイルのメタデータを抽出する\n4. 抽出したメタデータをSupabaseデータベースに保存する\n5. 処理結果をログに記録する",
      "fileName": "video-metadata.ts",
      "relatedScreen": "SCR-002",
      "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { FaSearch, FaSort, FaUpload } from 'react-icons/fa';\nimport { supabase } from '@/supabase';\nimport Topbar from '@/components/Topbar';\n\nconst MainPage = () => {\n    const [videos, setVideos] = useState([]);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [sortOption, setSortOption] = useState('uploadDate');\n    const [currentPage, setCurrentPage] = useState(1);\n    const videosPerPage = 12;\n    const router = useRouter();\n\n    useEffect(() => {\n        fetchVideos();\n    }, [searchTerm, sortOption, currentPage]);\n\n    const fetchVideos = async () => {\n        let query = supabase\n            .from('videos')\n            .select('*')\n            .range((currentPage - 1) * videosPerPage, currentPage * videosPerPage - 1);\n\n        if (searchTerm) {\n            query = query.ilike('title', `%${searchTerm}%`);\n        }\n\n        switch (sortOption) {\n            case 'title':\n                query = query.order('title');\n                break;\n            case 'viewCount':\n                query = query.order('view_count', { ascending: false });\n                break;\n            case 'uploadDate':\n            default:\n                query = query.order('upload_date', { ascending: false });\n                break;\n        }\n\n        const { data, error } = await query;\n\n        if (error) {\n            console.error('動画の取得に失敗しました:', error);\n            // サンプルデータを表示\n            setVideos([\n                { id: 1, title: 'サンプル動画1', thumbnail_path: 'https://placehold.co/280x158', view_count: 100, upload_date: '2023-06-01' },\n                { id: 2, title: 'サンプル動画2', thumbnail_path: 'https://placehold.co/280x158', view_count: 200, upload_date: '2023-06-02' },\n                // ... 他のサンプルデータ\n            ]);\n        } else {\n            setVideos(data);\n        }\n    };\n\n    const handleSearch = (e) => {\n        e.preventDefault();\n        setCurrentPage(1);\n        fetchVideos();\n    };\n\n    const handleSortChange = (e) => {\n        setSortOption(e.target.value);\n        setCurrentPage(1);\n    };\n\n    const handleUpload = () => {\n        router.push('/upload');\n    };\n\n    return (\n        <div className=\"min-h-screen h-full bg-gray-100\">\n            <Topbar />\n            <div className=\"container mx-auto px-4 py-8\">\n                <h1 className=\"text-3xl font-bold mb-8 text-gray-800\">動画リスト</h1>\n\n                <div className=\"flex justify-between items-center mb-6\">\n                    <form onSubmit={handleSearch} className=\"flex-1 mr-4\">\n                        <div className=\"relative\">\n                            <input\n                                type=\"text\"\n                                placeholder=\"動画を検索...\"\n                                className=\"w-full p-2 pl-10 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                                value={searchTerm}\n                                onChange={(e) => setSearchTerm(e.target.value)}\n                            />\n                            <FaSearch className=\"absolute left-3 top-3 text-gray-400\" />\n                        </div>\n                    </form>\n\n                    <div className=\"flex items-center\">\n                        <select\n                            className=\"p-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 mr-4\"\n                            value={sortOption}\n                            onChange={handleSortChange}\n                        >\n                            <option value=\"uploadDate\">アップロード日</option>\n                            <option value=\"viewCount\">視聴回数</option>\n                            <option value=\"title\">タイトル</option>\n                        </select>\n                        <button\n                            onClick={handleUpload}\n                            className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg flex items-center\"\n                        >\n                            <FaUpload className=\"mr-2\" />\n                            アップロード\n                        </button>\n                    </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\">\n                    {videos.map((video) => (\n                        <Link href={`/watch/${video.id}`} key={video.id}>\n                            <div className=\"bg-white rounded-lg shadow-md overflow-hidden transition-transform duration-300 hover:scale-105\">\n                                <img\n                                    src={video.thumbnail_path || 'https://placehold.co/280x158'}\n                                    alt={video.title}\n                                    className=\"w-full h-40 object-cover\"\n                                />\n                                <div className=\"p-4\">\n                                    <h2 className=\"text-lg font-semibold mb-2 text-gray-800 truncate\">{video.title}</h2>\n                                    <div className=\"flex justify-between text-sm text-gray-600\">\n                                        <span>{video.view_count} 回視聴</span>\n                                        <span>{new Date(video.upload_date).toLocaleDateString()}</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </Link>\n                    ))}\n                </div>\n\n                <div className=\"mt-8 flex justify-center\">\n                    <button\n                        onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                        disabled={currentPage === 1}\n                        className=\"mx-1 px-4 py-2 bg-gray-200 text-gray-800 rounded-lg disabled:opacity-50\"\n                    >\n                        前へ\n                    </button>\n                    <span className=\"mx-4 py-2\">{currentPage}</span>\n                    <button\n                        onClick={() => setCurrentPage(prev => prev + 1)}\n                        className=\"mx-1 px-4 py-2 bg-gray-200 text-gray-800 rounded-lg\"\n                    >\n                        次へ\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default MainPage;"
    },
    {
      "id": "BAC-003",
      "category": "動画管理",
      "handleName": "サムネイル生成",
      "description": "アップロードされた動画からサムネイル画像を生成する",
      "handleProcedure": "1. アップロードされた動画ファイルを読み込む\n2. 動画の特定のフレーム（例：5秒目）を抽出する\n3. 抽出したフレームをJPEG形式の画像に変換する\n4. 生成したサムネイル画像をAzure Blob Storageに保存する\n5. サムネイル画像のURLをデータベースに記録する",
      "fileName": "thumbnail-generator.ts",
      "relatedScreen": "SCR-002",
      "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { FaSearch, FaSort, FaUpload } from 'react-icons/fa';\nimport { supabase } from '@/supabase';\nimport Topbar from '@/components/Topbar';\n\nconst MainPage = () => {\n    const [videos, setVideos] = useState([]);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [sortOption, setSortOption] = useState('uploadDate');\n    const [currentPage, setCurrentPage] = useState(1);\n    const videosPerPage = 12;\n    const router = useRouter();\n\n    useEffect(() => {\n        fetchVideos();\n    }, [searchTerm, sortOption, currentPage]);\n\n    const fetchVideos = async () => {\n        let query = supabase\n            .from('videos')\n            .select('*')\n            .range((currentPage - 1) * videosPerPage, currentPage * videosPerPage - 1);\n\n        if (searchTerm) {\n            query = query.ilike('title', `%${searchTerm}%`);\n        }\n\n        switch (sortOption) {\n            case 'title':\n                query = query.order('title');\n                break;\n            case 'viewCount':\n                query = query.order('view_count', { ascending: false });\n                break;\n            case 'uploadDate':\n            default:\n                query = query.order('upload_date', { ascending: false });\n                break;\n        }\n\n        const { data, error } = await query;\n\n        if (error) {\n            console.error('動画の取得に失敗しました:', error);\n            // サンプルデータを表示\n            setVideos([\n                { id: 1, title: 'サンプル動画1', thumbnail_path: 'https://placehold.co/280x158', view_count: 100, upload_date: '2023-06-01' },\n                { id: 2, title: 'サンプル動画2', thumbnail_path: 'https://placehold.co/280x158', view_count: 200, upload_date: '2023-06-02' },\n                // ... 他のサンプルデータ\n            ]);\n        } else {\n            setVideos(data);\n        }\n    };\n\n    const handleSearch = (e) => {\n        e.preventDefault();\n        setCurrentPage(1);\n        fetchVideos();\n    };\n\n    const handleSortChange = (e) => {\n        setSortOption(e.target.value);\n        setCurrentPage(1);\n    };\n\n    const handleUpload = () => {\n        router.push('/upload');\n    };\n\n    return (\n        <div className=\"min-h-screen h-full bg-gray-100\">\n            <Topbar />\n            <div className=\"container mx-auto px-4 py-8\">\n                <h1 className=\"text-3xl font-bold mb-8 text-gray-800\">動画リスト</h1>\n\n                <div className=\"flex justify-between items-center mb-6\">\n                    <form onSubmit={handleSearch} className=\"flex-1 mr-4\">\n                        <div className=\"relative\">\n                            <input\n                                type=\"text\"\n                                placeholder=\"動画を検索...\"\n                                className=\"w-full p-2 pl-10 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                                value={searchTerm}\n                                onChange={(e) => setSearchTerm(e.target.value)}\n                            />\n                            <FaSearch className=\"absolute left-3 top-3 text-gray-400\" />\n                        </div>\n                    </form>\n\n                    <div className=\"flex items-center\">\n                        <select\n                            className=\"p-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 mr-4\"\n                            value={sortOption}\n                            onChange={handleSortChange}\n                        >\n                            <option value=\"uploadDate\">アップロード日</option>\n                            <option value=\"viewCount\">視聴回数</option>\n                            <option value=\"title\">タイトル</option>\n                        </select>\n                        <button\n                            onClick={handleUpload}\n                            className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg flex items-center\"\n                        >\n                            <FaUpload className=\"mr-2\" />\n                            アップロード\n                        </button>\n                    </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\">\n                    {videos.map((video) => (\n                        <Link href={`/watch/${video.id}`} key={video.id}>\n                            <div className=\"bg-white rounded-lg shadow-md overflow-hidden transition-transform duration-300 hover:scale-105\">\n                                <img\n                                    src={video.thumbnail_path || 'https://placehold.co/280x158'}\n                                    alt={video.title}\n                                    className=\"w-full h-40 object-cover\"\n                                />\n                                <div className=\"p-4\">\n                                    <h2 className=\"text-lg font-semibold mb-2 text-gray-800 truncate\">{video.title}</h2>\n                                    <div className=\"flex justify-between text-sm text-gray-600\">\n                                        <span>{video.view_count} 回視聴</span>\n                                        <span>{new Date(video.upload_date).toLocaleDateString()}</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </Link>\n                    ))}\n                </div>\n\n                <div className=\"mt-8 flex justify-center\">\n                    <button\n                        onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                        disabled={currentPage === 1}\n                        className=\"mx-1 px-4 py-2 bg-gray-200 text-gray-800 rounded-lg disabled:opacity-50\"\n                    >\n                        前へ\n                    </button>\n                    <span className=\"mx-4 py-2\">{currentPage}</span>\n                    <button\n                        onClick={() => setCurrentPage(prev => prev + 1)}\n                        className=\"mx-1 px-4 py-2 bg-gray-200 text-gray-800 rounded-lg\"\n                    >\n                        次へ\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default MainPage;"
    },
    {
      "id": "BAC-004",
      "category": "動画管理",
      "handleName": "動画ストリーミング",
      "description": "クライアントからのリクエストに応じて 動画をストリーミング配信する",
      "handleProcedure": "1. クライアントからのリクエストを受け取る\n2. リクエストされた動画のIDを確認する\n3. Azure Blob Storageから該当の動画ファイルを取得する\n4. 適切なストリーミングプロトコル（HLS/DASH）でエンコードする\n5. エンコードされたストリームをクライアントに送信する",
      "fileName": "video-streaming.ts",
      "relatedScreen": "SCR-003",
      "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { supabase } from '@/supabase';\nimport Topbar from '@/components/Topbar';\nimport { FaPlay, FaPause, FaVolumeUp, FaVolumeMute } from 'react-icons/fa';\nimport axios from 'axios';\n\nconst VideoPlayer = () => {\n  const router = useRouter();\n  const { id } = router.query;\n  const [video, setVideo] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(1);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [relatedVideos, setRelatedVideos] = useState([]);\n\n  useEffect(() => {\n    if (id) {\n      fetchVideo();\n      fetchRelatedVideos();\n    }\n  }, [id]);\n\n  const fetchVideo = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('videos')\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) throw error;\n      setVideo(data);\n      updateViewCount();\n    } catch (error) {\n      console.error('Error fetching video:', error);\n      setVideo({\n        id: 'sample-id',\n        title: 'サンプル動画',\n        description: 'これはサンプル動画の説明です。',\n        file_path: 'https://example.com/sample-video.mp4',\n        view_count: 1000,\n      });\n    }\n  };\n\n  const fetchRelatedVideos = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('videos')\n        .select('id, title, thumbnail_path')\n        .neq('id', id)\n        .limit(5);\n\n      if (error) throw error;\n      setRelatedVideos(data);\n    } catch (error) {\n      console.error('Error fetching related videos:', error);\n      setRelatedVideos([\n        { id: '1', title: '関連動画1', thumbnail_path: 'https://placehold.co/200x112' },\n        { id: '2', title: '関連動画2', thumbnail_path: 'https://placehold.co/200x112' },\n        { id: '3', title: '関連動画3', thumbnail_path: 'https://placehold.co/200x112' },\n      ]);\n    }\n  };\n\n  const updateViewCount = async () => {\n    try {\n      await axios.post('/api/view-counter', { videoId: id });\n    } catch (error) {\n      console.error('Error updating view count:', error);\n    }\n  };\n\n  const handlePlayPause = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  const handleVolumeChange = (e) => {\n    setVolume(parseFloat(e.target.value));\n  };\n\n  const handleTimeUpdate = (e) => {\n    setCurrentTime(e.target.currentTime);\n  };\n\n  const handleDurationChange = (e) => {\n    setDuration(e.target.duration);\n  };\n\n  const handleSeek = (e) => {\n    const video = document.getElementById('videoPlayer');\n    const time = (parseFloat(e.target.value) / 100) * duration;\n    video.currentTime = time;\n    setCurrentTime(time);\n  };\n\n  const formatTime = (time) => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n  };\n\n  if (!video) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"bg-white rounded-lg shadow-lg overflow-hidden\">\n          <div className=\"relative pt-[56.25%]\">\n            <video\n              id=\"videoPlayer\"\n              className=\"absolute top-0 left-0 w-full h-full\"\n              src={video.file_path}\n              poster={video.thumbnail_path || 'https://placehold.co/1280x720'}\n              onTimeUpdate={handleTimeUpdate}\n              onDurationChange={handleDurationChange}\n            />\n          </div>\n          <div className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <button\n                onClick={handlePlayPause}\n                className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\"\n              >\n                {isPlaying ? <FaPause /> : <FaPlay />}\n              </button>\n              <div className=\"flex items-center\">\n                <button\n                  onClick={() => setVolume(volume === 0 ? 1 : 0)}\n                  className=\"mr-2 text-gray-600\"\n                >\n                  {volume === 0 ? <FaVolumeMute /> : <FaVolumeUp />}\n                </button>\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"1\"\n                  step=\"0.1\"\n                  value={volume}\n                  onChange={handleVolumeChange}\n                  className=\"w-24\"\n                />\n              </div>\n            </div>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              value={(currentTime / duration) * 100 || 0}\n              onChange={handleSeek}\n              className=\"w-full mb-4\"\n            />\n            <div className=\"text-sm text-gray-600 mb-4\">\n              {formatTime(currentTime)} / {formatTime(duration)}\n            </div>\n            <h1 className=\"text-2xl font-bold mb-2\">{video.title}</h1>\n            <p className=\"text-gray-600 mb-4\">{video.description}</p>\n            <p className=\"text-sm text-gray-500\">視聴回数: {video.view_count}</p>\n          </div>\n        </div>\n        <div className=\"mt-8\">\n          <h2 className=\"text-xl font-bold mb-4\">関連動画</h2>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4\">\n            {relatedVideos.map((relatedVideo) => (\n              <div\n                key={relatedVideo.id}\n                className=\"bg-white rounded-lg shadow-md overflow-hidden cursor-pointer\"\n                onClick={() => router.push(`/video/${relatedVideo.id}`)}\n              >\n                <img\n                  src={relatedVideo.thumbnail_path || 'https://placehold.co/200x112'}\n                  alt={relatedVideo.title}\n                  className=\"w-full h-28 object-cover\"\n                />\n                <div className=\"p-2\">\n                  <h3 className=\"text-sm font-semibold truncate\">{relatedVideo.title}</h3>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VideoPlayer;"
    },
    {
      "id": "BAC-005",
      "category": "統計",
      "handleName": "視聴回数更新",
      "description": "動画の視聴回数を更新し データベースに記録する",
      "handleProcedure": "1. クライアントから視聴イベントを受け取る\n2. 該当の動画IDの視聴回数を増加させる\n3. 更新された視聴回数をデータベースに保存する\n4. 視聴履歴テーブルに新しいエントリーを追加する\n5. 更新結果をクライアントに返す",
      "fileName": "view-counter.ts",
      "relatedScreen": "SCR-003",
      "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { supabase } from '@/supabase';\nimport Topbar from '@/components/Topbar';\nimport { FaPlay, FaPause, FaVolumeUp, FaVolumeMute } from 'react-icons/fa';\nimport axios from 'axios';\n\nconst VideoPlayer = () => {\n  const router = useRouter();\n  const { id } = router.query;\n  const [video, setVideo] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState(1);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [relatedVideos, setRelatedVideos] = useState([]);\n\n  useEffect(() => {\n    if (id) {\n      fetchVideo();\n      fetchRelatedVideos();\n    }\n  }, [id]);\n\n  const fetchVideo = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('videos')\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) throw error;\n      setVideo(data);\n      updateViewCount();\n    } catch (error) {\n      console.error('Error fetching video:', error);\n      setVideo({\n        id: 'sample-id',\n        title: 'サンプル動画',\n        description: 'これはサンプル動画の説明です。',\n        file_path: 'https://example.com/sample-video.mp4',\n        view_count: 1000,\n      });\n    }\n  };\n\n  const fetchRelatedVideos = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('videos')\n        .select('id, title, thumbnail_path')\n        .neq('id', id)\n        .limit(5);\n\n      if (error) throw error;\n      setRelatedVideos(data);\n    } catch (error) {\n      console.error('Error fetching related videos:', error);\n      setRelatedVideos([\n        { id: '1', title: '関連動画1', thumbnail_path: 'https://placehold.co/200x112' },\n        { id: '2', title: '関連動画2', thumbnail_path: 'https://placehold.co/200x112' },\n        { id: '3', title: '関連動画3', thumbnail_path: 'https://placehold.co/200x112' },\n      ]);\n    }\n  };\n\n  const updateViewCount = async () => {\n    try {\n      await axios.post('/api/view-counter', { videoId: id });\n    } catch (error) {\n      console.error('Error updating view count:', error);\n    }\n  };\n\n  const handlePlayPause = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  const handleVolumeChange = (e) => {\n    setVolume(parseFloat(e.target.value));\n  };\n\n  const handleTimeUpdate = (e) => {\n    setCurrentTime(e.target.currentTime);\n  };\n\n  const handleDurationChange = (e) => {\n    setDuration(e.target.duration);\n  };\n\n  const handleSeek = (e) => {\n    const video = document.getElementById('videoPlayer');\n    const time = (parseFloat(e.target.value) / 100) * duration;\n    video.currentTime = time;\n    setCurrentTime(time);\n  };\n\n  const formatTime = (time) => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n  };\n\n  if (!video) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"bg-white rounded-lg shadow-lg overflow-hidden\">\n          <div className=\"relative pt-[56.25%]\">\n            <video\n              id=\"videoPlayer\"\n              className=\"absolute top-0 left-0 w-full h-full\"\n              src={video.file_path}\n              poster={video.thumbnail_path || 'https://placehold.co/1280x720'}\n              onTimeUpdate={handleTimeUpdate}\n              onDurationChange={handleDurationChange}\n            />\n          </div>\n          <div className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <button\n                onClick={handlePlayPause}\n                className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\"\n              >\n                {isPlaying ? <FaPause /> : <FaPlay />}\n              </button>\n              <div className=\"flex items-center\">\n                <button\n                  onClick={() => setVolume(volume === 0 ? 1 : 0)}\n                  className=\"mr-2 text-gray-600\"\n                >\n                  {volume === 0 ? <FaVolumeMute /> : <FaVolumeUp />}\n                </button>\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"1\"\n                  step=\"0.1\"\n                  value={volume}\n                  onChange={handleVolumeChange}\n                  className=\"w-24\"\n                />\n              </div>\n            </div>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              value={(currentTime / duration) * 100 || 0}\n              onChange={handleSeek}\n              className=\"w-full mb-4\"\n            />\n            <div className=\"text-sm text-gray-600 mb-4\">\n              {formatTime(currentTime)} / {formatTime(duration)}\n            </div>\n            <h1 className=\"text-2xl font-bold mb-2\">{video.title}</h1>\n            <p className=\"text-gray-600 mb-4\">{video.description}</p>\n            <p className=\"text-sm text-gray-500\">視聴回数: {video.view_count}</p>\n          </div>\n        </div>\n        <div className=\"mt-8\">\n          <h2 className=\"text-xl font-bold mb-4\">関連動画</h2>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4\">\n            {relatedVideos.map((relatedVideo) => (\n              <div\n                key={relatedVideo.id}\n                className=\"bg-white rounded-lg shadow-md overflow-hidden cursor-pointer\"\n                onClick={() => router.push(`/video/${relatedVideo.id}`)}\n              >\n                <img\n                  src={relatedVideo.thumbnail_path || 'https://placehold.co/200x112'}\n                  alt={relatedVideo.title}\n                  className=\"w-full h-28 object-cover\"\n                />\n                <div className=\"p-2\">\n                  <h3 className=\"text-sm font-semibold truncate\">{relatedVideo.title}</h3>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VideoPlayer;"
    },
    {
      "id": "BAC-006",
      "category": "レポート",
      "handleName": "使用状況レポート生成",
      "description": "システムの使用状況データを集計し レポートを生成する",
      "handleProcedure": "1. データベースから指定期間の使用状況データを取得する\n2. データを分析し 各種統計情報を計算する（視聴回数 人気動画 ユーザーアクティビティなど）\n3. 分析結果をレポート形式にフォーマットする\n4. 生成したレポートをPDFまたはCSV形式で出力する\n5. レポートファイルを一時的に保存し ダウンロードURLを生成する",
      "fileName": "usage-report-generator.ts",
      "relatedScreen": "SCR-008",
      "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { NextPage } from 'next';\nimport { useRouter } from 'next/router';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { FiDownload } from 'react-icons/fi';\nimport { createClient } from '@supabase/supabase-js';\nimport Topbar from '@/components/Topbar';\nimport axios from 'axios';\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend);\n\nconst supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!);\n\nconst Reports: NextPage = () => {\n  const router = useRouter();\n  const [startDate, setStartDate] = useState<string>('');\n  const [endDate, setEndDate] = useState<string>('');\n  const [viewCountData, setViewCountData] = useState<any>(null);\n  const [popularVideosData, setPopularVideosData] = useState<any>(null);\n  const [userActivityData, setUserActivityData] = useState<any>(null);\n\n  useEffect(() => {\n    fetchReportData();\n  }, [startDate, endDate]);\n\n  const fetchReportData = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('view_history')\n        .select('*')\n        .gte('viewed_at', startDate)\n        .lte('viewed_at', endDate);\n\n      if (error) throw error;\n\n      // ここでデータを加工して、各グラフ用のデータを生成\n      const processedViewCountData = processViewCountData(data);\n      const processedPopularVideosData = processPopularVideosData(data);\n      const processedUserActivityData = processUserActivityData(data);\n\n      setViewCountData(processedViewCountData);\n      setPopularVideosData(processedPopularVideosData);\n      setUserActivityData(processedUserActivityData);\n    } catch (error) {\n      console.error('データの取得に失敗しました:', error);\n      // エラー時のサンプルデータ\n      setViewCountData(sampleViewCountData);\n      setPopularVideosData(samplePopularVideosData);\n      setUserActivityData(sampleUserActivityData);\n    }\n  };\n\n  const processViewCountData = (data: any) => {\n    // 実際のデータ処理ロジックをここに記述\n    return sampleViewCountData;\n  };\n\n  const processPopularVideosData = (data: any) => {\n    // 実際のデータ処理ロジックをここに記述\n    return samplePopularVideosData;\n  };\n\n  const processUserActivityData = (data: any) => {\n    // 実際のデータ処理ロジックをここに記述\n    return sampleUserActivityData;\n  };\n\n  const handleExport = async () => {\n    try {\n      const response = await axios.post('/api/export-report', {\n        startDate,\n        endDate,\n        viewCountData,\n        popularVideosData,\n        userActivityData,\n      });\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'usage_report.pdf');\n      document.body.appendChild(link);\n      link.click();\n    } catch (error) {\n      console.error('レポートのエクスポートに失敗しました:', error);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8\">使用状況レポート</h1>\n        <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4\">期間選択</h2>\n          <div className=\"flex space-x-4\">\n            <input\n              type=\"date\"\n              value={startDate}\n              onChange={(e) => setStartDate(e.target.value)}\n              className=\"border rounded p-2\"\n            />\n            <input\n              type=\"date\"\n              value={endDate}\n              onChange={(e) => setEndDate(e.target.value)}\n              className=\"border rounded p-2\"\n            />\n          </div>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\">\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">視聴回数推移</h2>\n            {viewCountData && <Line data={viewCountData} />}\n          </div>\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">人気動画ランキング</h2>\n            {popularVideosData && <Bar data={popularVideosData} />}\n          </div>\n        </div>\n        <div className=\"bg-white rounded-lg shadow p-6 mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4\">ユーザーアクティビティ</h2>\n          {userActivityData && <Line data={userActivityData} />}\n        </div>\n        <button\n          onClick={handleExport}\n          className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded flex items-center\"\n        >\n          <FiDownload className=\"mr-2\" />\n          レポートをエクスポート\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst sampleViewCountData = {\n  labels: ['1日目', '2日目', '3日目', '4日目', '5日目', '6日目', '7日目'],\n  datasets: [\n    {\n      label: '視聴回数',\n      data: [65, 59, 80, 81, 56, 55, 40],\n      fill: false,\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1,\n    },\n  ],\n};\n\nconst samplePopularVideosData = {\n  labels: ['動画A', '動画B', '動画C', '動画D', '動画E'],\n  datasets: [\n    {\n      label: '視聴回数',\n      data: [300, 250, 200, 150, 100],\n      backgroundColor: 'rgba(54, 162, 235, 0.5)',\n    },\n  ],\n};\n\nconst sampleUserActivityData = {\n  labels: ['月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日', '日曜日'],\n  datasets: [\n    {\n      label: 'アクティブユーザー数',\n      data: [120, 190, 30, 50, 20, 30, 40],\n      fill: false,\n      borderColor: 'rgb(255, 99, 132)',\n      tension: 0.1,\n    },\n  ],\n};\n\nexport default Reports;"
    },
    {
      "id": "BAC-007",
      "category": "セキュリティ",
      "handleName": "システムログ記録",
      "description": "システム全体のログを記録し 保存する",
      "handleProcedure": "1. システム内の各種イベントをキャプチャする\n2. イベントの種類 発生時刻 関連ユーザー情報などを含むログエントリーを生成する\n3. 生成したログエントリーをデータベースに保存する\n4. 重要なセキュリティイベントの場合 管理者に通知を送る\n5. 古いログエントリーを定期的にアーカイブする",
      "fileName": "system-logger.ts",
      "relatedScreen": "SCR-019",
      "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { createClient } from '@supabase/supabase-js';\nimport Topbar from '@/components/Topbar';\nimport { FiCalendar, FiTag, FiAlertTriangle, FiSearch, FiDownload } from 'react-icons/fi';\n\nconst supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);\n\nconst SecurityLogs = () => {\n  const router = useRouter();\n  const [logs, setLogs] = useState([]);\n  const [dateRange, setDateRange] = useState({ start: '', end: '' });\n  const [eventType, setEventType] = useState('');\n  const [severity, setSeverity] = useState('');\n  const [selectedLog, setSelectedLog] = useState(null);\n\n  useEffect(() => {\n    fetchLogs();\n  }, []);\n\n  const fetchLogs = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('system_logs')\n        .select('*')\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      setLogs(data);\n    } catch (error) {\n      console.error('ログの取得に失敗しました:', error.message);\n      // サンプルデータを表示\n      setLogs([\n        { id: 1, event_type: 'ログイン', event_description: '管理者がログインしました', created_at: '2023-06-01T10:00:00Z', ip_address: '192.168.1.1' },\n        { id: 2, event_type: 'ファイルアクセス', event_description: '機密ファイルにアクセスしました', created_at: '2023-06-01T11:30:00Z', ip_address: '192.168.1.2' },\n        { id: 3, event_type: 'パスワード変更', event_description: 'ユーザーがパスワードを変更しました', created_at: '2023-06-02T09:15:00Z', ip_address: '192.168.1.3' },\n      ]);\n    }\n  };\n\n  const filterLogs = () => {\n    // フィルタリングロジックを実装\n  };\n\n  const exportLogs = () => {\n    // ログのエクスポート機能を実装\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-6 text-gray-800\">セキュリティログ</h1>\n\n        <div className=\"bg-white shadow-md rounded-lg p-6 mb-6\">\n          <div className=\"flex flex-wrap -mx-2 mb-4\">\n            <div className=\"w-full md:w-1/3 px-2 mb-4\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"dateRange\">\n                期間\n              </label>\n              <div className=\"flex items-center\">\n                <FiCalendar className=\"mr-2 text-gray-600\" />\n                <input\n                  type=\"date\"\n                  id=\"startDate\"\n                  className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                  value={dateRange.start}\n                  onChange={(e) => setDateRange({ ...dateRange, start: e.target.value })}\n                />\n                <span className=\"mx-2\">~</span>\n                <input\n                  type=\"date\"\n                  id=\"endDate\"\n                  className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                  value={dateRange.end}\n                  onChange={(e) => setDateRange({ ...dateRange, end: e.target.value })}\n                />\n              </div>\n            </div>\n            <div className=\"w-full md:w-1/3 px-2 mb-4\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"eventType\">\n                イベントタイプ\n              </label>\n              <div className=\"flex items-center\">\n                <FiTag className=\"mr-2 text-gray-600\" />\n                <select\n                  id=\"eventType\"\n                  className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                  value={eventType}\n                  onChange={(e) => setEventType(e.target.value)}\n                >\n                  <option value=\"\">すべて</option>\n                  <option value=\"login\">ログイン</option>\n                  <option value=\"file_access\">ファイルアクセス</option>\n                  <option value=\"password_change\">パスワード変更</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"w-full md:w-1/3 px-2 mb-4\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"severity\">\n                重要度\n              </label>\n              <div className=\"flex items-center\">\n                <FiAlertTriangle className=\"mr-2 text-gray-600\" />\n                <select\n                  id=\"severity\"\n                  className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                  value={severity}\n                  onChange={(e) => setSeverity(e.target.value)}\n                >\n                  <option value=\"\">すべて</option>\n                  <option value=\"low\">低</option>\n                  <option value=\"medium\">中</option>\n                  <option value=\"high\">高</option>\n                </select>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex justify-end\">\n            <button\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline mr-2\"\n              onClick={filterLogs}\n            >\n              <FiSearch className=\"inline-block mr-2\" />\n              フィルター\n            </button>\n            <button\n              className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n              onClick={exportLogs}\n            >\n              <FiDownload className=\"inline-block mr-2\" />\n              エクスポート\n            </button>\n          </div>\n        </div>\n\n        <div className=\"bg-white shadow-md rounded-lg overflow-hidden\">\n          <table className=\"min-w-full leading-normal\">\n            <thead>\n              <tr>\n                <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                  日時\n                </th>\n                <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                  イベントタイプ\n                </th>\n                <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                  説明\n                </th>\n                <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                  IPアドレス\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {logs.map((log) => (\n                <tr key={log.id} onClick={() => setSelectedLog(log)} className=\"hover:bg-gray-50 cursor-pointer\">\n                  <td className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\n                    {new Date(log.created_at).toLocaleString()}\n                  </td>\n                  <td className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\n                    {log.event_type}\n                  </td>\n                  <td className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\n                    {log.event_description}\n                  </td>\n                  <td className=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\n                    {log.ip_address}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {selectedLog && (\n          <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full\" id=\"my-modal\">\n            <div className=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\">\n              <div className=\"mt-3 text-center\">\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900\">ログ詳細</h3>\n                <div className=\"mt-2 px-7 py-3\">\n                  <p className=\"text-sm text-gray-500\">\n                    日時: {new Date(selectedLog.created_at).toLocaleString()}\n                  </p>\n                  <p className=\"text-sm text-gray-500\">\n                    イベントタイプ: {selectedLog.event_type}\n                  </p>\n                  <p className=\"text-sm text-gray-500\">\n                    説明: {selectedLog.event_description}\n                  </p>\n                  <p className=\"text-sm text-gray-500\">\n                    IPアドレス: {selectedLog.ip_address}\n                  </p>\n                </div>\n                <div className=\"items-center px-4 py-3\">\n                  <button\n                    id=\"ok-btn\"\n                    className=\"px-4 py-2 bg-blue-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-300\"\n                    onClick={() => setSelectedLog(null)}\n                  >\n                    閉じる\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SecurityLogs;"
    },
    {
      "id": "BAC-008",
      "category": "バックアップ",
      "handleName": "システムバックアップ",
      "description": "定期的にシステムデータのバックアップを作成する",
      "handleProcedure": "1. バックアップスケジュールに従ってプロセスを開始する\n2. データベースの完全バックアップを作成する\n3. Azure Blob Storage内の動画ファイルとサムネイル画像のバックアップを作成する\n4. システム設定ファイルのバックアップを作成する\n5. バックアップデータを安全な外部ストレージに転送する\n6. バックアップの完了をログに記録し 管理者に通知する",
      "fileName": "system-backup.ts",
      "relatedScreen": "SCR-010",
      "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { FiSave, FiHardDrive, FiUsers, FiArchive, FiZap } from 'react-icons/fi';\nimport { supabase } from '@/supabase';\nimport Topbar from '@/components/Topbar';\n\nconst SystemSettings = () => {\n  const router = useRouter();\n  const [storageSettings, setStorageSettings] = useState({\n    connectionString: '',\n    containerName: '',\n  });\n  const [userManagementSettings, setUserManagementSettings] = useState({\n    maxUsers: 0,\n    passwordPolicy: '',\n  });\n  const [backupSettings, setBackupSettings] = useState({\n    frequency: '',\n    retentionPeriod: '',\n  });\n  const [performanceSettings, setPerformanceSettings] = useState({\n    cacheSize: 0,\n    maxConcurrentConnections: 0,\n  });\n\n  useEffect(() => {\n    fetchSettings();\n  }, []);\n\n  const fetchSettings = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('system_settings')\n        .select('*')\n        .single();\n\n      if (error) throw error;\n\n      if (data) {\n        setStorageSettings(data.storage_settings);\n        setUserManagementSettings(data.user_management_settings);\n        setBackupSettings(data.backup_settings);\n        setPerformanceSettings(data.performance_settings);\n      }\n    } catch (error) {\n      console.error('設定の取得に失敗しました:', error);\n      // エラー時のサンプルデータ\n      setStorageSettings({\n        connectionString: 'DefaultConnectionString',\n        containerName: 'DefaultContainer',\n      });\n      setUserManagementSettings({\n        maxUsers: 100,\n        passwordPolicy: 'デフォルトパスワードポリシー',\n      });\n      setBackupSettings({\n        frequency: '毎日',\n        retentionPeriod: '30日',\n      });\n      setPerformanceSettings({\n        cacheSize: 1024,\n        maxConcurrentConnections: 100,\n      });\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      const { error } = await supabase\n        .from('system_settings')\n        .upsert({\n          storage_settings: storageSettings,\n          user_management_settings: userManagementSettings,\n          backup_settings: backupSettings,\n          performance_settings: performanceSettings,\n        });\n\n      if (error) throw error;\n\n      alert('設定が保存されました');\n    } catch (error) {\n      console.error('設定の保存に失敗しました:', error);\n      alert('設定の保存に失敗しました');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8 text-gray-800\">システム設定</h1>\n\n        <div className=\"bg-white shadow-md rounded-lg p-6 mb-8\">\n          <h2 className=\"text-2xl font-semibold mb-4 flex items-center\">\n            <FiHardDrive className=\"mr-2\" />\n            ストレージ設定\n          </h2>\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-gray-700\">接続文字列</label>\n            <input\n              type=\"text\"\n              value={storageSettings.connectionString}\n              onChange={(e) => setStorageSettings({ ...storageSettings, connectionString: e.target.value })}\n              className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2\"\n            />\n          </div>\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-gray-700\">コンテナ名</label>\n            <input\n              type=\"text\"\n              value={storageSettings.containerName}\n              onChange={(e) => setStorageSettings({ ...storageSettings, containerName: e.target.value })}\n              className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2\"\n            />\n          </div>\n        </div>\n\n        <div className=\"bg-white shadow-md rounded-lg p-6 mb-8\">\n          <h2 className=\"text-2xl font-semibold mb-4 flex items-center\">\n            <FiUsers className=\"mr-2\" />\n            ユーザー管理設定\n          </h2>\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-gray-700\">最大ユーザー数</label>\n            <input\n              type=\"number\"\n              value={userManagementSettings.maxUsers}\n              onChange={(e) => setUserManagementSettings({ ...userManagementSettings, maxUsers: parseInt(e.target.value) })}\n              className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2\"\n            />\n          </div>\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-gray-700\">パスワードポリシー</label>\n            <textarea\n              value={userManagementSettings.passwordPolicy}\n              onChange={(e) => setUserManagementSettings({ ...userManagementSettings, passwordPolicy: e.target.value })}\n              className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2\"\n              rows={3}\n            />\n          </div>\n        </div>\n\n        <div className=\"bg-white shadow-md rounded-lg p-6 mb-8\">\n          <h2 className=\"text-2xl font-semibold mb-4 flex items-center\">\n            <FiArchive className=\"mr-2\" />\n            バックアップ設定\n          </h2>\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-gray-700\">バックアップ頻度</label>\n            <select\n              value={backupSettings.frequency}\n              onChange={(e) => setBackupSettings({ ...backupSettings, frequency: e.target.value })}\n              className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2\"\n            >\n              <option value=\"daily\">毎日</option>\n              <option value=\"weekly\">毎週</option>\n              <option value=\"monthly\">毎月</option>\n            </select>\n          </div>\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-gray-700\">保持期間</label>\n            <input\n              type=\"text\"\n              value={backupSettings.retentionPeriod}\n              onChange={(e) => setBackupSettings({ ...backupSettings, retentionPeriod: e.target.value })}\n              className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2\"\n            />\n          </div>\n        </div>\n\n        <div className=\"bg-white shadow-md rounded-lg p-6 mb-8\">\n          <h2 className=\"text-2xl font-semibold mb-4 flex items-center\">\n            <FiZap className=\"mr-2\" />\n            パフォーマンス設定\n          </h2>\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-gray-700\">キャッシュサイズ (MB)</label>\n            <input\n              type=\"number\"\n              value={performanceSettings.cacheSize}\n              onChange={(e) => setPerformanceSettings({ ...performanceSettings, cacheSize: parseInt(e.target.value) })}\n              className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2\"\n            />\n          </div>\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-gray-700\">最大同時接続数</label>\n            <input\n              type=\"number\"\n              value={performanceSettings.maxConcurrentConnections}\n              onChange={(e) => setPerformanceSettings({ ...performanceSettings, maxConcurrentConnections: parseInt(e.target.value) })}\n              className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2\"\n            />\n          </div>\n        </div>\n\n        <button\n          onClick={handleSave}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded flex items-center\"\n        >\n          <FiSave className=\"mr-2\" />\n          設定を保存\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SystemSettings;"
    },
    {
      "id": "BAC-009",
      "category": "通知",
      "handleName": "ユーザー通知送信",
      "description": "システムイベントに基づいてユーザーに通知を送信する",
      "handleProcedure": "1. 通知トリガーとなるイベントを検出する\n2. 通知内容とターゲットユーザーを決定する\n3. ユーザーの通知設定を確認する\n4. 適切な通知チャネル（アプリ内通知 メールなど）を選択する\n5. 通知メッセージを生成し 送信する\n6. 送信結果をログに記録する",
      "fileName": "notification-sender.ts",
      "relatedScreen": "SCR-013",
      "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { createClient } from '@supabase/supabase-js';\nimport Topbar from '@/components/Topbar';\nimport { FaBell, FaCheckCircle, FaEye, FaEyeSlash, FaCog } from 'react-icons/fa';\n\nconst supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);\n\ninterface Notification {\n  id: string;\n  user_id: string;\n  message: string;\n  is_read: boolean;\n  created_at: string;\n}\n\nconst NotificationsPage: React.FC = () => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [filter, setFilter] = useState<'all' | 'unread' | 'read'>('all');\n  const router = useRouter();\n\n  useEffect(() => {\n    fetchNotifications();\n  }, []);\n\n  const fetchNotifications = async () => {\n    const { data: session } = await supabase.auth.getSession();\n    if (!session) {\n      router.push('/login');\n      return;\n    }\n\n    const { data, error } = await supabase\n      .from('notifications')\n      .select('*')\n      .eq('user_id', session.session.user.id)\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      console.error('通知の取得に失敗しました:', error);\n      return;\n    }\n\n    setNotifications(data || []);\n  };\n\n  const markAllAsRead = async () => {\n    const { data: session } = await supabase.auth.getSession();\n    if (!session) return;\n\n    const { error } = await supabase\n      .from('notifications')\n      .update({ is_read: true })\n      .eq('user_id', session.session.user.id)\n      .eq('is_read', false);\n\n    if (error) {\n      console.error('通知の一括既読に失敗しました:', error);\n      return;\n    }\n\n    fetchNotifications();\n  };\n\n  const filteredNotifications = notifications.filter(notification => {\n    if (filter === 'unread') return !notification.is_read;\n    if (filter === 'read') return notification.is_read;\n    return true;\n  });\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-6\">通知一覧</h1>\n        <div className=\"flex justify-between items-center mb-4\">\n          <div>\n            <button\n              onClick={() => setFilter('all')}\n              className={`mr-2 px-4 py-2 rounded ${filter === 'all' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}\n            >\n              全て\n            </button>\n            <button\n              onClick={() => setFilter('unread')}\n              className={`mr-2 px-4 py-2 rounded ${filter === 'unread' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}\n            >\n              未読\n            </button>\n            <button\n              onClick={() => setFilter('read')}\n              className={`px-4 py-2 rounded ${filter === 'read' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}\n            >\n              既読\n            </button>\n          </div>\n          <button\n            onClick={markAllAsRead}\n            className=\"bg-green-500 text-white px-4 py-2 rounded flex items-center\"\n          >\n            <FaCheckCircle className=\"mr-2\" />\n            全て既読にする\n          </button>\n        </div>\n        <div className=\"bg-white shadow-md rounded-lg overflow-hidden\">\n          {filteredNotifications.map((notification) => (\n            <div\n              key={notification.id}\n              className={`p-4 border-b ${notification.is_read ? 'bg-gray-50' : 'bg-white'}`}\n            >\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <FaBell className={`mr-3 ${notification.is_read ? 'text-gray-400' : 'text-blue-500'}`} />\n                  <p className={`${notification.is_read ? 'text-gray-600' : 'text-black font-semibold'}`}>\n                    {notification.message}\n                  </p>\n                </div>\n                <div className=\"flex items-center\">\n                  <span className=\"text-sm text-gray-500 mr-2\">\n                    {new Date(notification.created_at).toLocaleString('ja-JP')}\n                  </span>\n                  {notification.is_read ? <FaEye className=\"text-gray-400\" /> : <FaEyeSlash className=\"text-blue-500\" />}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n        <div className=\"mt-6 text-center\">\n          <Link href=\"/settings\" className=\"text-blue-500 hover:underline flex items-center justify-center\">\n            <FaCog className=\"mr-2\" />\n            通知設定\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NotificationsPage;"
    },
    {
      "id": "BAC-010",
      "category": "分析",
      "handleName": "アナリティクスデータ集計",
      "description": "システム利用状況の分析データを集計し 保存する",
      "handleProcedure": "1. 定期的に（例：1時間ごと）データ集計プロセスを開始する\n2. データベースから最新の利用データを取得する\n3. 各種指標（アクティブユーザー数 平均視聴時間 人気タグなど）を計算する\n4. 集計結果を分析用データベースに保存する\n5. 長期トレンド分析のためのデータを更新する\n6. 集計プロセスの完了をログに記録する",
      "fileName": "analytics-aggregator.ts",
      "relatedScreen": "SCR-018",
      "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { NextPage } from 'next';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { supabase } from '@/supabase';\nimport Topbar from '@/components/Topbar';\nimport { FaChartBar, FaUserFriends, FaVideo, FaClock, FaDownload } from 'react-icons/fa';\nimport { Line, Bar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst AnalyticsDashboard: NextPage = () => {\n  const router = useRouter();\n  const [summaryStats, setSummaryStats] = useState({\n    totalUsers: 0,\n    totalVideos: 0,\n    totalViews: 0,\n    averageWatchTime: 0,\n  });\n  const [trendData, setTrendData] = useState({\n    labels: [],\n    datasets: [\n      {\n        label: '視聴回数',\n        data: [],\n        borderColor: '#3366CC',\n        backgroundColor: 'rgba(51, 102, 204, 0.5)',\n      },\n    ],\n  });\n  const [popularVideos, setPopularVideos] = useState([]);\n  const [userActivityData, setUserActivityData] = useState({\n    labels: [],\n    datasets: [\n      {\n        label: 'アクティブユーザー数',\n        data: [],\n        backgroundColor: '#FF9900',\n      },\n    ],\n  });\n\n  useEffect(() => {\n    fetchAnalyticsData();\n  }, []);\n\n  const fetchAnalyticsData = async () => {\n    try {\n      const { data, error } = await supabase.rpc('get_analytics_data');\n      if (error) throw error;\n\n      setSummaryStats(data.summary_stats);\n      setTrendData(data.trend_data);\n      setPopularVideos(data.popular_videos);\n      setUserActivityData(data.user_activity_data);\n    } catch (error) {\n      console.error('Analytics data fetch error:', error);\n      // サンプルデータを表示\n      setSummaryStats({\n        totalUsers: 1000,\n        totalVideos: 500,\n        totalViews: 10000,\n        averageWatchTime: 15,\n      });\n      setTrendData({\n        labels: ['1月', '2月', '3月', '4月', '5月'],\n        datasets: [\n          {\n            label: '視聴回数',\n            data: [500, 600, 750, 800, 1000],\n            borderColor: '#3366CC',\n            backgroundColor: 'rgba(51, 102, 204, 0.5)',\n          },\n        ],\n      });\n      setPopularVideos([\n        { title: '人気動画1', views: 1000 },\n        { title: '人気動画2', views: 800 },\n        { title: '人気動画3', views: 600 },\n      ]);\n      setUserActivityData({\n        labels: ['月', '火', '水', '木', '金'],\n        datasets: [\n          {\n            label: 'アクティブユーザー数',\n            data: [100, 120, 150, 130, 180],\n            backgroundColor: '#FF9900',\n          },\n        ],\n      });\n    }\n  };\n\n  const exportData = () => {\n    // データエクスポート処理を実装\n    alert('データのエクスポートが完了しました。');\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8 text-gray-800\">アナリティクスダッシュボード</h1>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <StatCard icon={<FaUserFriends />} title=\"総ユーザー数\" value={summaryStats.totalUsers} />\n          <StatCard icon={<FaVideo />} title=\"総動画数\" value={summaryStats.totalVideos} />\n          <StatCard icon={<FaChartBar />} title=\"総視聴回数\" value={summaryStats.totalViews} />\n          <StatCard icon={<FaClock />} title=\"平均視聴時間\" value={`${summaryStats.averageWatchTime}分`} />\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          <div className=\"bg-white p-6 rounded-lg shadow\">\n            <h2 className=\"text-xl font-semibold mb-4\">視聴回数トレンド</h2>\n            <Line data={trendData} options={{ responsive: true, maintainAspectRatio: false }} />\n          </div>\n          <div className=\"bg-white p-6 rounded-lg shadow\">\n            <h2 className=\"text-xl font-semibold mb-4\">ユーザーアクティビティ</h2>\n            <Bar data={userActivityData} options={{ responsive: true, maintainAspectRatio: false }} />\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg shadow mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4\">人気動画ランキング</h2>\n          <ul>\n            {popularVideos.map((video, index) => (\n              <li key={index} className=\"flex justify-between items-center py-2 border-b last:border-b-0\">\n                <span>{video.title}</span>\n                <span className=\"font-semibold\">{video.views}回視聴</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <button\n          onClick={exportData}\n          className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded flex items-center\"\n        >\n          <FaDownload className=\"mr-2\" />\n          データをエクスポート\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst StatCard = ({ icon, title, value }) => (\n  <div className=\"bg-white p-6 rounded-lg shadow flex items-center\">\n    <div className=\"text-3xl text-blue-500 mr-4\">{icon}</div>\n    <div>\n      <h3 className=\"text-lg font-semibold text-gray-700\">{title}</h3>\n      <p className=\"text-2xl font-bold text-gray-900\">{value}</p>\n    </div>\n  </div>\n);\n\nexport default AnalyticsDashboard;"
    }
  ]
}
